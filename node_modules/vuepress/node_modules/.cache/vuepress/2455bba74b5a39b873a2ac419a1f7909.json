{"remainingRequest":"/home/bparanj/work/bparanj.gitlab.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/bparanj/work/bparanj.gitlab.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/bparanj/work/bparanj.gitlab.io/node_modules/vue-loader/lib/index.js??ref--1-1!/home/bparanj/work/bparanj.gitlab.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/home/bparanj/work/bparanj.gitlab.io/docs/PROC-CONVERSION.md?vue&type=template&id=7d568254&","dependencies":[{"path":"/home/bparanj/work/bparanj.gitlab.io/docs/PROC-CONVERSION.md","mtime":1541523588300},{"path":"/home/bparanj/work/bparanj.gitlab.io/node_modules/cache-loader/dist/cjs.js","mtime":1541188364181},{"path":"/home/bparanj/work/bparanj.gitlab.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1541188366278},{"path":"/home/bparanj/work/bparanj.gitlab.io/node_modules/cache-loader/dist/cjs.js","mtime":1541188364181},{"path":"/home/bparanj/work/bparanj.gitlab.io/node_modules/vue-loader/lib/index.js","mtime":1541188366278},{"path":"/home/bparanj/work/bparanj.gitlab.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1541188390625}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"content\" }, [\n      _c(\"h2\", { attrs: { id: \"proc-block-conversions\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#proc-block-conversions\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Proc-Block Conversions\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h3\", { attrs: { id: \"executing-the-block\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#executing-the-block\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Executing the Block\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"Ruby is capable of executing a block by taking a block in a method.\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-ruby line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-ruby\" } }, [\n          _c(\"code\", [\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"def\")]),\n            _vm._v(\" greeter\\n  \"),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"yield\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"end\")]),\n            _vm._v(\"\\n\\ngreeter \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\" puts \"),\n            _c(\"span\", { attrs: { class: \"token string\" } }, [\n              _vm._v(\"'hello'\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"3\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"4\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"5\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"p\", [\n        _vm._v(\"We need to use \"),\n        _c(\"code\", [_vm._v(\"yield\")]),\n        _vm._v(\" inside the greeter method to execute the code in the block.\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h3\", { attrs: { id: \"ruby-creating-a-proc-object-from-block\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: {\n              href: \"#ruby-creating-a-proc-object-from-block\",\n              \"aria-hidden\": \"true\"\n            }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Ruby Creating a Proc Object from Block\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"Ruby can create a Proc object from a Block for us. We need to prefix the method argument with ampersand.\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-ruby line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-ruby\" } }, [\n          _c(\"code\", [\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"def\")]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token function\" } }, [\n              _vm._v(\"greeter\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"&\")]),\n            _vm._v(\"block\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\"\\n  block\\n\"),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"end\")]),\n            _vm._v(\"\\n\\ngreet \"),\n            _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"=\")]),\n            _vm._v(\" greeter \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\" puts \"),\n            _c(\"span\", { attrs: { class: \"token string\" } }, [\n              _vm._v(\"'hello'\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\ngreet\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _vm._v(\"call\\n\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"3\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"4\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"5\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"6\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"div\", { staticClass: \"tip custom-block\" }, [\n        _c(\"p\", { staticClass: \"custom-block-title\" }, [\n          _vm._v(\"SELF DISCOVERY\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"p\", [\n          _vm._v(\n            \"Print the class name of the block before the block is returned. What is the output?\"\n          )\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"We can also call the Proc inside the method.\")]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-ruby line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-ruby\" } }, [\n          _c(\"code\", [\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"def\")]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token function\" } }, [\n              _vm._v(\"greeter\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"&\")]),\n            _vm._v(\"block\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\"\\n  block\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _vm._v(\"call\\n\"),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"end\")]),\n            _vm._v(\"\\n\\ngreeter  \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\" puts \"),\n            _c(\"span\", { attrs: { class: \"token string\" } }, [\n              _vm._v(\"'hello'\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"3\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"4\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"5\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"h3\", { attrs: { id: \"converting-a-proc-to-a-block\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: {\n              href: \"#converting-a-proc-to-a-block\",\n              \"aria-hidden\": \"true\"\n            }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Converting a Proc to a Block\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"If we prefix a Proc object with an ampersand, it becomes a block.\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-ruby line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-ruby\" } }, [\n          _c(\"code\", [\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"def\")]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token function\" } }, [\n              _vm._v(\"greeter\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"&\")]),\n            _vm._v(\"block\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\"\\n  \"),\n            _c(\"span\", { attrs: { class: \"token builtin\" } }, [_vm._v(\"Proc\")]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"new\")]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"&\")]),\n            _vm._v(\"block\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"end\")]),\n            _vm._v(\"\\n\\ngreet \"),\n            _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"=\")]),\n            _vm._v(\" greeter \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\" puts \"),\n            _c(\"span\", { attrs: { class: \"token string\" } }, [\n              _vm._v(\"'hello'\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\ngreet\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _vm._v(\"call\\n\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"3\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"4\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"5\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"6\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"p\", [\n        _vm._v(\n          \"In line 1, the block is converted to a Proc. In line 2, the Proc constructor takes a Proc object and converts it to a block. Compare the above example to the following:\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-ruby line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-ruby\" } }, [\n          _c(\"code\", [\n            _vm._v(\"greet \"),\n            _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"=\")]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token builtin\" } }, [_vm._v(\"Proc\")]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"new\")]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\" puts \"),\n            _c(\"span\", { attrs: { class: \"token string\" } }, [\n              _vm._v(\"'hello'\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\ngreet\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _vm._v(\"call\\n\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"p\", [_vm._v(\"The line:\")]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-ruby line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-ruby\" } }, [\n          _c(\"code\", [\n            _c(\"span\", { attrs: { class: \"token builtin\" } }, [_vm._v(\"Proc\")]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"new\")]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"&\")]),\n            _vm._v(\"block\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\"\\n\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"p\", [_vm._v(\"is equivalent to :\")]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-ruby line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-ruby\" } }, [\n          _c(\"code\", [\n            _c(\"span\", { attrs: { class: \"token builtin\" } }, [_vm._v(\"Proc\")]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"new\")]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\" puts \"),\n            _c(\"span\", { attrs: { class: \"token string\" } }, [\n              _vm._v(\"'hello'\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"p\", [\n        _vm._v(\"In line 1 \"),\n        _c(\"code\", [_vm._v(\"greeter(&block)\")]),\n        _vm._v(\", the \"),\n        _c(\"code\", [_vm._v(\"greeter\")]),\n        _vm._v(\n          \" method is not taking an argument. Eventhough the syntax looks like an argument block is passed in because we are using the brackets ( ). As you can see when we call the greeter method, we are not passing an argument:\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-ruby line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-ruby\" } }, [\n          _c(\"code\", [\n            _vm._v(\"greeter \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\" puts \"),\n            _c(\"span\", { attrs: { class: \"token string\" } }, [\n              _vm._v(\"'hello'\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"p\", [\n        _vm._v(\n          \"The greeter does not have an argument. Only the block is provided. Similarly, the Proc constructor is not taking an argument:\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-ruby line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-ruby\" } }, [\n          _c(\"code\", [\n            _c(\"span\", { attrs: { class: \"token builtin\" } }, [_vm._v(\"Proc\")]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"new\")]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"&\")]),\n            _vm._v(\"block\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\"\\n\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"p\", [_vm._v(\"The constructor is taking a block.\")]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-ruby line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-ruby\" } }, [\n          _c(\"code\", [\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"def\")]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token function\" } }, [\n              _vm._v(\"greeter\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"&\")]),\n            _vm._v(\"block\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\"\\n  p block\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"class\")\n            ]),\n            _vm._v(\"\\n  \"),\n            _c(\"span\", { attrs: { class: \"token class-name\" } }, [\n              _vm._v(\"Proc\"),\n              _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\".\")\n              ]),\n              _vm._v(\"new\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"&\")]),\n            _vm._v(\"block\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"end\")]),\n            _vm._v(\"\\n\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"3\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"4\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"p\", [\n        _vm._v(\"This will print \"),\n        _c(\"code\", [_vm._v(\"Proc\")]),\n        _vm._v(\n          \". When the & is prefixed to a Proc object, it gets converted to a block.\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"tip custom-block\" }, [\n        _c(\"p\", { staticClass: \"custom-block-title\" }, [\n          _vm._v(\"Block to Proc\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"p\", [_vm._v(\"Prefixing & to a block converts a block to a Proc.\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"tip custom-block\" }, [\n        _c(\"p\", { staticClass: \"custom-block-title\" }, [\n          _vm._v(\"Proc to Block\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"p\", [\n          _vm._v(\n            \"Prefixing & to a Proc object converts a Proc object to a block\"\n          )\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"h3\", { attrs: { id: \"converting-a-proc-to-a-block-2\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: {\n              href: \"#converting-a-proc-to-a-block-2\",\n              \"aria-hidden\": \"true\"\n            }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Converting a Proc to a Block\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"A simple example illustrating how to convert a Proc object to a block by prefixing a Proc object with ampersand.\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-ruby line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-ruby\" } }, [\n          _c(\"code\", [\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"def\")]),\n            _vm._v(\" greeter\\n  \"),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"yield\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"end\")]),\n            _vm._v(\"\\n\\nproc \"),\n            _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"=\")]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token builtin\" } }, [_vm._v(\"Proc\")]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"new\")]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\" puts \"),\n            _c(\"span\", { attrs: { class: \"token string\" } }, [\n              _vm._v(\"'hello'\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { attrs: { class: \"token function\" } }, [\n              _vm._v(\"greeter\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"&\")]),\n            _vm._v(\"proc\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\"\\n\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"3\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"4\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"5\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"6\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"p\", [_vm._v(\"Compare this with the first code example.\")]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-ruby line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-ruby\" } }, [\n          _c(\"code\", [\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"def\")]),\n            _vm._v(\" greeter\\n  \"),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"yield\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"end\")]),\n            _vm._v(\"\\n\\ngreeter \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\" puts \"),\n            _c(\"span\", { attrs: { class: \"token string\" } }, [\n              _vm._v(\"'hello'\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"3\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"4\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"5\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"div\", { staticClass: \"tip custom-block\" }, [\n        _c(\"p\", { staticClass: \"custom-block-title\" }, [\n          _vm._v(\"BEHIND THE SCENES\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"p\", [_vm._v(\"Ruby converts\")]),\n        _vm._v(\" \"),\n        _c(\"p\", [_vm._v(\"greeter(&proc)\")]),\n        _vm._v(\" \"),\n        _c(\"p\", [_vm._v(\"to\")]),\n        _vm._v(\" \"),\n        _c(\"p\", [_vm._v(\"greeter { puts 'hello' }\")])\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}