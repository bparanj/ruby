{"remainingRequest":"/home/bparanj/work/bparanj.gitlab.io/node_modules/vue-loader/lib/index.js??ref--1-1!/home/bparanj/work/bparanj.gitlab.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/home/bparanj/work/bparanj.gitlab.io/docs/SOON.md?vue&type=template&id=3111be4c&","dependencies":[{"path":"/home/bparanj/work/bparanj.gitlab.io/docs/SOON.md","mtime":1541523588300},{"path":"/home/bparanj/work/bparanj.gitlab.io/node_modules/cache-loader/dist/cjs.js","mtime":1541188364181},{"path":"/home/bparanj/work/bparanj.gitlab.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1541188366278},{"path":"/home/bparanj/work/bparanj.gitlab.io/node_modules/cache-loader/dist/cjs.js","mtime":1541188364181},{"path":"/home/bparanj/work/bparanj.gitlab.io/node_modules/vue-loader/lib/index.js","mtime":1541188366278},{"path":"/home/bparanj/work/bparanj.gitlab.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1541188390625}],"contextDependencies":[],"result":["\n<div class=\"content\"><h2 id=\"symbol-to-proc\"><a class=\"header-anchor\" href=\"#symbol-to-proc\" aria-hidden=\"true\">#</a> Symbol to Proc</h2>\n<h3 id=\"concepts-covered\"><a class=\"header-anchor\" href=\"#concepts-covered\" aria-hidden=\"true\">#</a> Concepts Covered</h3>\n<ol>\n<li>*args in the method argument.</li>\n<li>Providing default value for block variable.</li>\n<li>Using send to message an object.</li>\n</ol>\n<p>In this lesson, you will learn how to convert code within a block to use ampersand-colon shortcut. So, this code:</p>\n<!--beforebegin--><div class=\"language-ruby line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ruby\"><code>result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'how'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>x<span class=\"token operator\">|</span> x<span class=\"token punctuation\">.</span>upcase <span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--><p>becomes:</p>\n<!--beforebegin--><div class=\"language-ruby line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ruby\"><code>result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'how'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token symbol\">:upcase</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--><p>Our goal is to go from:</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>map {|x| x.upcase } ----&gt; map(&amp;:upcase)\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--><div class=\"tip custom-block\"><p class=\"custom-block-title\">NOTE</p>\n<p>The map method takes a block to execute in the first case. It takes a Symbol object as an argument in the second case.</p>\n</div>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">PRE-REQUISITE CONCEPT</p>\n<p>The &amp; in the argment converts the Symbol object to a Proc object by calling to_proc on it.</p>\n</div>\n<p>The object in this case is an instance of Symbol. We need to implement <code>to_proc</code> instance method in Symbol class.</p>\n<!--beforebegin--><div class=\"language-ruby line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ruby\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Symbol</span>\n  <span class=\"token keyword\">def</span> to_proc\n    <span class=\"token builtin\">Proc</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>o<span class=\"token operator\">|</span> o<span class=\"token punctuation\">.</span>upcase <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\nresult <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'how'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token symbol\">:upcase</span><span class=\"token punctuation\">)</span>\np result\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div><!--beforeend--></div><!--afterend--><p>This is a quick and dirty solution that will work only for <code>upcase</code>. We need the ablility to send any message to the block variable.</p>\n<!--beforebegin--><div class=\"language-ruby line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ruby\"><code><span class=\"token keyword\">def</span> to_proc\n  <span class=\"token builtin\">Proc</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>o<span class=\"token operator\">|</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">end</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div><!--beforeend--></div><!--afterend--><p>We can use <code>send</code> method to send a message that is represented by the symbol. However, this solution will only work for blocks that take only one block variable.</p>\n<h2 id=\"multiple-block-variables\"><a class=\"header-anchor\" href=\"#multiple-block-variables\" aria-hidden=\"true\">#</a> Multiple Block Variables</h2>\n<p>Our solution will break if we have more than one block variable. Consider:</p>\n<!--beforebegin--><div class=\"language-ruby line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ruby\"><code>output <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>result<span class=\"token punctuation\">,</span> element<span class=\"token operator\">|</span> result <span class=\"token operator\">+</span> element <span class=\"token punctuation\">}</span>\np output\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><p>In this case, the result and element are the two block variables. Ruby is capable of simplifying the code.</p>\n<!--beforebegin--><div class=\"language-ruby line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ruby\"><code>output <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">:</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span>\np output\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><p>If we use our current <code>to_proc</code> implementation, this code will break. We can fix by passing the arguments to the <code>send</code> method.</p>\n<!--beforebegin--><div class=\"language-ruby line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ruby\"><code><span class=\"token keyword\">def</span> to_proc\n  <span class=\"token builtin\">Proc</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>o<span class=\"token punctuation\">,</span> args<span class=\"token operator\">|</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">end</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div><!--beforeend--></div><!--afterend--><p>But this will break our previous one block variable example:</p>\n<!--beforebegin--><div class=\"language-ruby line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ruby\"><code>result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'how'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token symbol\">:upcase</span><span class=\"token punctuation\">)</span>\np result\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><p>We can handle the one block variable case by initializing the second block variable to <code>nil</code>. We also need to use the splat operator in the second argument to <code>send</code> method.</p>\n<!--beforebegin--><div class=\"language-ruby line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ruby\"><code><span class=\"token keyword\">def</span> to_proc\n  <span class=\"token builtin\">Proc</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>o<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token keyword\">nil</span><span class=\"token operator\">|</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">end</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div><!--beforeend--></div><!--afterend--><p>Now we can handle one or more block variables. Our final solution:</p>\n<!--beforebegin--><div class=\"language-ruby line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ruby\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Symbol</span>\n  <span class=\"token keyword\">def</span> to_proc\n    <span class=\"token builtin\">Proc</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>o<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token keyword\">nil</span><span class=\"token operator\">|</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\noutput <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">:</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span>\np output\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div><!--beforeend--></div><!--afterend--></div>\n",null]}